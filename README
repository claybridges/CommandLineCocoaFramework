
CommandLineCocoaFramework

Test building Frameworks from command line using rake. I've chosen rake over
make, because one can describe build rules and collect dependencies dynamicaly
in rake much easier then in make.

The Rakefile will autmotically find dependencies of every object file to be
generated. So no 'rake clean' will be needed for incremental development.

TODO: Add support for
- Resource
- sub frameworks
- C++
- Ojective-C++


Origional README 
===============================================================================

CommandLineCocoaFramework

This creates a minimal Cocoa framework -- called Min -- from the command line,
using the Nu make tool, nuke. You can find out more about Nu at 
http://github.com/timburks/nu.

The framework contains a single class, Min, with 
a single method -yo, just for verification. In addition, framework initialization
seems to require the existence of an initialization C function, so I just put that
in the class file.

From what I can tell, nuke is not as fully baked as, say, rake. On the other
hand, it has built-in support for frameworks, and did the job in 11 lines of
code. Not too shabby.

If you "nuke install", this will install under "/Library/Frameworks". nuke
seems to occasionally segfault when running on top of a dirty framework,
so in that case, just "nuke clobber; nuke install".

My only bar for success was whether I could get the framework to successfully
load in the nu & macruby shells, nush & macirb. Yay! Here's the results:

gort:~ clay$ macirb
irb(main):001:0> framework "Min"
=> true
irb(main):002:0> Min.yo
=> "'Sup. I'm the Min framework."

Nu Shell.
% (load "Min")
t
% (Min yo)
"'Sup. I'm the Min framework."

I welcome other ways to do this, e.g. make, rake, macrake, etc. Send me
a push request.

Clay Bridges
21 Sep 2010
